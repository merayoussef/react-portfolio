{"version":3,"sources":["utils/helpers.js","component/Nav/index.js","component/About/index.js","component/Contact/index.js","component/Work/index.js","assets/img/BG-image.jpg","App.js","serviceWorker.js","index.js"],"names":["capitalizeFirstLetter","string","charAt","toUpperCase","slice","Nav","props","categories","setCurrentCategory","contactSelected","currentCategory","setContactSelected","useEffect","document","title","name","className","data-testid","href","onClick","map","category","About","id","ContactForm","useState","email","message","formState","setFormState","errorMessage","setErrorMessage","handleChange","e","target","isValid","test","String","toLowerCase","validateEmail","value","length","onSubmit","preventDefault","console","log","htmlFor","type","defaultValue","onBlur","rows","class","Portfolio","App","description","src","coverImage","style","width","maxHeight","alt","Contact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.c3be75a0.chunk.js","sourcesContent":["export function capitalizeFirstLetter(string) {\r\n    return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n\r\nexport function validateEmail(email) {\r\n    var re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    return re.test(String(email).toLowerCase());\r\n}","import React, { useEffect } from 'react';\r\nimport { capitalizeFirstLetter } from '../../utils/helpers';\r\n\r\nfunction Nav(props) {\r\n    const {\r\n        categories = [],\r\n        setCurrentCategory,\r\n        contactSelected,\r\n        currentCategory,\r\n        setContactSelected,\r\n    } = props;\r\n\r\n    useEffect(() => {\r\n        document.title = capitalizeFirstLetter(currentCategory.name);\r\n    }, [currentCategory]);\r\n\r\n    return (\r\n        <header className=\"flex-row px-1\">\r\n            <h2>\r\n                <a data-testid=\"link\" href=\"/\">\r\n                    Mera Youssef\r\n            </a>\r\n            </h2>\r\n            <nav>\r\n                <ul className=\"flex-row\">\r\n                    <li className=\"mx-2\">\r\n                        <a data-testid=\"about\" href=\"#about\" onClick={() => setContactSelected(false)}>\r\n                            About me\r\n            </a>\r\n                    </li>\r\n                    <li className={`mx-2 ${contactSelected && 'navActive'}`}>\r\n                        <span onClick={() => setContactSelected(true)}>Contact</span>\r\n                    </li>\r\n                    {categories.map((category) => (\r\n                        <li\r\n                            className={`mx-1 ${currentCategory.name === category.name && !contactSelected && 'navActive'\r\n                                }`}\r\n                            key={category.name}\r\n                        >\r\n                            <span\r\n                                onClick={() => {\r\n                                    setCurrentCategory(category);\r\n                                    setContactSelected(false);\r\n                                }}\r\n                            >\r\n                                {capitalizeFirstLetter(category.name)}\r\n                            </span>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </nav>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Nav;\r\n\r\n","import React from 'react';\r\n\r\nfunction About() {\r\n\r\n    return (\r\n        <section className=\"my-5\" >\r\n        <h1 id=\"about\">About Me</h1>\r\n        <div className=\"my-2\">\r\n                <p>\r\n                Hello, my name is Mera. I am an Egyptian native but have been living in Nashville for over 20 years. I enjoy traveling and spending time with family. I love the outdoors and enjoy going hiking. I am currently in a coding bootcamp and set to finish in\r\n                    January 2021.\r\n                </p>\r\n                <p>\r\n                I am currently learning about HTML, CSS, Bootstrap, Java, JQuery and APIs. I practice coding daily and I am excited to learn all the main concepts to become a full-stack developer.  \r\n                </p>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\nexport default About;","import React, { useState } from 'react';\r\nimport { validateEmail } from '../../utils/helpers';\r\n\r\n\r\nfunction ContactForm() {\r\n    const [formState, setFormState] = useState({ name: '', email: '', message: '' });\r\n\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const { name, email, message } = formState;\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (!errorMessage) {\r\n            setFormState({ [e.target.name]: e.target.value });\r\n            console.log('Form', formState);\r\n        }\r\n    };\r\n\r\n    const handleChange = (e) => {\r\n        if (e.target.name === 'email') {\r\n            const isValid = validateEmail(e.target.value);\r\n            if (!isValid) {\r\n                setErrorMessage('Your email is invalid.');\r\n            } else {\r\n                setErrorMessage('');\r\n            }\r\n        } else {\r\n            if (!e.target.value.length) {\r\n                setErrorMessage(`${e.target.name} is required.`);\r\n            } else {\r\n                setErrorMessage('');\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <section>\r\n            <h1 id=\"contact\">Contact me</h1>\r\n            <form id=\"contact-form\" onSubmit={handleSubmit}>\r\n                <div>\r\n                    <label htmlFor=\"name\">Name:</label>\r\n                    <input type=\"text\" name=\"name\" defaultValue={name} onBlur={handleChange} />\r\n                </div>\r\n                <div>\r\n                    <label htmlFor=\"email\">Email address:</label>\r\n                    <input type=\"email\" name=\"email\" defaultValue={email} onBlur={handleChange} />\r\n                </div>\r\n                <div>\r\n                    <label htmlFor=\"message\">Message:</label>\r\n                    <textarea name=\"message\" rows=\"5\" defaultValue={message} onBlur={handleChange} />\r\n                </div>\r\n                {errorMessage && (\r\n                    <div>\r\n                        <p className=\"error-text\">{errorMessage}</p>\r\n                    </div>\r\n                )}\r\n                <button data-testid=\"button\" type=\"submit\">Submit</button>\r\n            </form>\r\n            <div>\r\n                <address>\r\n            <a href=\"tel:6154232457\">615-423-2457</a>\r\n            <a href=\"mailto:merayoussef91@hotmail.com\">Merayoussef91@hotmail.com</a>\r\n            <a href=\"https://github.com/merayoussef/\"> <i class=\"fab fa-github\"></i></a>\r\n            <a href=\"https://www.linkedin.com/in/merayoussef\">LinkedIn</a>\r\n        </address>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default ContactForm;\r\n","import React from 'react';\r\n\r\nfunction Portfolio() {\r\n    return (\r\n        <section id=\"portfolio\" >\r\n            <h2>Portfolio </h2>\r\n            <div class=\"work-grid-container\">\r\n                <a href=\"https://random-group-name.github.io/SubMyFood/\" class=\"Sub-My-Food grid-item\">\r\n                    <div>\r\n                        <h3>Sub My Food</h3>\r\n                        <span>HTML/CSS/JavaScript/APIs</span>\r\n                    </div>\r\n                </a>\r\n\r\n                <a href=\"https://merayoussef.github.io/Project-Run-Buddy/\" class=\"Run-Buddy grid-item\">\r\n                    <div>\r\n                        <h3>Run Buddy</h3>\r\n                        <span>HTML/CSS</span>\r\n                    </div>\r\n                </a>\r\n\r\n                <a href=\"https://merayoussef.github.io/Project-Horiseon/\" class=\"Horiseon grid-item\">\r\n                    <div>\r\n                        <h3>Horiseon</h3>\r\n                        <span>HTML/CSS</span>\r\n                    </div>\r\n                </a>\r\n\r\n                <a href=\"https://sma-to-success.herokuapp.com/\" class=\"Winter-Wishlist grid-item\">\r\n                    <div>\r\n                        <h3>Winter Wishlist</h3>\r\n                        <span>Handlebars/JavaScript/Node</span>\r\n                    </div>\r\n                </a>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default Portfolio;","export default __webpack_public_path__ + \"static/media/BG-image.f3692969.jpg\";","import React, { useState } from 'react';\nimport Nav from './component/Nav';\nimport About from './component/About';\nimport ContactForm from './component/Contact';\nimport Portfolio from './component/Work';\nimport coverImage from '../src/assets/img/BG-image.jpg'\n\n\nfunction App() {\n  const [categories] = useState([\n    {\n      name: 'Portfolio',\n      description: \"photos and project links to my work\",\n    }   \n  ]);\n\n  const [currentCategory, setCurrentCategory] = useState(categories[0]);\n\n  const [contactSelected, setContactSelected] = useState(false);\n\n  return (\n    <div>\n      <Nav\n        categories={categories}\n        setCurrentCategory={setCurrentCategory}\n        currentCategory={currentCategory}\n        contactSelected={contactSelected}\n        setContactSelected={setContactSelected}\n      ></Nav>\n      <img src={coverImage} className=\"\" style={{ width: \"100%\", maxHeight: \"350px\" }} alt=\"cover\" />\n      <main>\n        {!contactSelected ? (\n          <>\n            <Portfolio currentCategory={currentCategory}></Portfolio>\n            <About></About>\n          </>\n        ) : (\n            <ContactForm></ContactForm>\n          )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n            headers: { 'Service-Worker': 'script' },\n        })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nserviceWorker.unregister();\n"],"sourceRoot":""}